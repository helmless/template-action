name: Helmless Template
description: Templates a Helmless chart into a serverless manifest.
author: 'Michael Reichenbach (Silthus)'
branding:
  icon: 'cloud'
  color: 'blue'

inputs:
  chart:
    description: 'Helm chart to use for templating. Defaults to the Google Cloud Run chart.'
    required: false
    default: 'oci://ghcr.io/helmless/google-cloudrun-service'
  chart_version:
    description: 'Version of the Helm chart to use.'
    required: false
    default: 'latest'
  files:
    description: 'Glob patterns of value files to include when templating the chart.'
    required: false
    default: ''
  values:
    description: 'Additional values to pass to the Helm chart when templating. Use one line per key-value pair.'
    required: false
  override_values:
    description: 'Override values to pass to the Helm chart when templating. These values are set last and will override any other values. Use one line per key-value pair.'
    required: false
  print_manifest:
    description: 'If true, print the rendered manifest to the console.'
    required: false
    default: 'true'
  output_path:
    description: 'The path to output the combined manifest to.'
    required: false
    default: 'helmless_manifest.yaml'
  output_dir:
    description: 'Directory to output individual template files to. If not specified, a temporary directory will be used.'
    required: false
    default: ''
outputs:
  manifest:
    description: 'The rendered manifest from the Helm chart as YAML.'
    value: ${{ steps.template.outputs.manifest }}
  manifest_path:
    description: 'The path to the rendered manifest.'
    value: ${{ inputs.output_path }}
  template_count:
    description: 'The number of templates rendered.'
    value: ${{ steps.template.outputs.template_count }}
  output_dir:
    description: 'The directory containing the individual template files.'
    value: ${{ steps.template.outputs.output_dir }}

runs:
  using: composite
  steps:
    - name: ‚öôÔ∏è Install Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.14.3'

    - name: üìú Template Chart
      id: template
      shell: bash
      run: |
        VERSION_ARG=""
        if [ "${{ inputs.chart_version }}" != "latest" ]; then
          VERSION_ARG="--version ${{ inputs.chart_version }}"
        fi

        # Check if a custom chart is provided and it's not a folder
        if [ -d "${{ inputs.chart }}" ]; then
          echo "üîÑ Running helm dependency update for custom chart..."
          helm dependency update ${{ inputs.chart }}
        fi

        FILES=""
        if [ -n "${{ inputs.files }}" ]; then
          # Process multi-line input, splitting by lines
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              # Handle each line which might contain space-separated patterns
              for pattern in $line; do
                if [ -f "$pattern" ]; then
                  FILES="$FILES -f $pattern"
                fi
              done
            fi
          done <<< "${{ inputs.files }}"
        fi

        VALUES=""
        if [ -n "${{ inputs.values }}" ]; then
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              VALUES="$VALUES --set $line"
            fi
          done <<< "${{ inputs.values }}"
        fi

        OVERRIDE_VALUES=""
        if [ -n "${{ inputs.override_values }}" ]; then
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              OVERRIDE_VALUES="$OVERRIDE_VALUES --set $line"
            fi
          done <<< "${{ inputs.override_values }}"
        fi

        # Set up output directory
        if [ -n "${{ inputs.output_dir }}" ]; then
          OUTPUT_DIR="${{ inputs.output_dir }}"
        else
          OUTPUT_DIR=$(mktemp -d)
        fi
        echo "output_dir=${OUTPUT_DIR}" >> $GITHUB_OUTPUT

        echo "üîç Templating Helm chart..."
        helm template ${{ inputs.chart }} \
          $VERSION_ARG \
          $FILES \
          $VALUES \
          $OVERRIDE_VALUES \
          --output-dir "${OUTPUT_DIR}"

        # Find all template files
        TEMPLATE_FILES=$(find "${OUTPUT_DIR}" -type f -name "*.yaml" | sort)
        TEMPLATE_COUNT=$(echo "${TEMPLATE_FILES}" | wc -l)
        echo "template_count=${TEMPLATE_COUNT}" >> $GITHUB_OUTPUT
        
        # Combine all templates into a single file
        rm -f "${{ inputs.output_path }}"
        for template in ${TEMPLATE_FILES}; do
          # Add separator between templates
          if [ -s "${{ inputs.output_path }}" ]; then
            echo "---" >> "${{ inputs.output_path }}"
          fi
          cat "${template}" >> "${{ inputs.output_path }}"
        done

        if [ -f "${{ inputs.output_path }}" ]; then
          echo "‚úÖ Successfully generated ${TEMPLATE_COUNT} template(s)"
        else
          echo "‚ùå Failed to find manifest at expected location"
          exit 1
        fi

        if [ "${{ inputs.print_manifest }}" = "true" ]; then
          echo "üìÑ Generated templates:"
          
          TEMPLATE_NUM=1
          for template in ${TEMPLATE_FILES}; do
            echo "üìÑ Template ${TEMPLATE_NUM}: $(basename ${template})"
            # Extract kind and name for a summary
            KIND=$(grep "kind:" "${template}" | head -1 | awk '{print $2}')
            NAME=$(grep "name:" "${template}" | head -1 | awk '{print $2}' | tr -d '"')
            echo "Kind: ${KIND}, Name: ${NAME}"
            
            # Print the full template if requested
            if [ "${{ inputs.print_manifest }}" = "true" ]; then
              cat "${template}"
            fi
            
            echo ""
            TEMPLATE_NUM=$((TEMPLATE_NUM + 1))
          done
        fi

        # Capture the combined manifest for the output
        echo "manifest<<EOF" >> $GITHUB_OUTPUT
        cat "${{ inputs.output_path }}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
